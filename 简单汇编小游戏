;  ASSEMBLY PROGRAM FOR TEST YOUR TYPE SKILLS  
;  WRITED BY         IN  06/24/2003
;  MODIFIED BY MI SHUANG IN 06/06/2005
; ------------------------------------------------
INCLUDE YLIB.H
INIT_BOARDER	MACRO	ROW, COL, CHAR, DHDL, COUNT		;设置边框宏
		LOCAL	LL
		MOV	CX, COUNT 
		MOV	DH, ROW
		MOV	DL, COL
LL:		MOV	AH, 02H
		MOV	BH, 00H
		INT	10H
		PUSH	CX
		MOV	AH, 0AH
		MOV	AL, CHAR 
		MOV	BH, 00H
		MOV	CX, 01H
		INT	10H
		POP	CX
		INC	DHDL
		LOOP	LL 
ENDM
; ---------------------------------------------------
SCROLL		MACRO	TOP,LEFT,BOTTOM,RIGHT,ATTRIB		;卷屏+设置颜色宏
		MOV	AX,0600H
		MOV	CH,TOP
		MOV	CL,LEFT
		MOV	DH,BOTTOM
		MOV	DL,RIGHT
		MOV	BH,ATTRIB
		INT	10H
ENDM
; ---------------------------------------------------

CLEAR_SCREEN	MACRO	TOP, LEFT, BOTTOM, RIGHT		; 清屏宏定义
		MOV	AH, 06H          
		MOV	AL, 00H
		MOV	BH, 07H
		MOV	CH, TOP
		MOV	CL, LEFT
		MOV	DH, BOTTOM
		MOV	DL, RIGHT
		INT	10H
		MOV	AH, 02H
		MOV	BH, 00H
		MOV	DH, 00H
		MOV	DL, 00H
		INT	10H
ENDM
; ---------------------------------------------------
SETCUSOR	MACRO	PAGE1,ROW,COLUMN
		MOV	AH,2					;设置光标位置
		MOV	DH,ROW					;光标行坐标
		MOV	DL,COLUMN				;光标列坐标
		MOV	BH,PAGE1				;BH=页号
		INT	10H					;BIOS功能调用
ENDM
; ----------------------------------------------------
MENU		MACRO	ROW, COL, TEXT; 菜单显示宏定义 
		MOV	AH, 02H
		MOV	BH, 00H
		MOV	DH, ROW
		MOV	DL, COL
		INT	10H
		MOV	AH, 09H
		LEA	DX, TEXT
		INT	21H
ENDM
; ======================================================
DATA		SEGMENT						;数据段
ZK		DB	"WELCOME TO PLAY$"     
DATE		DB	"DATE:$"
DIF0		DB	"PRESS 1 KEY TO CHOOSE EASY.$"
DIF1		DB	"PRESS 2 KEY TO CHOOSE NORMAL.$"
DIF2		DB	"PRESS 3 KEY TO CHOOSE DIFFICULT.$"
MES0		DB	"PRESS ENTER KEY TO CONTINUE.......$"
MES1		DB	"WHEN A LETTER IS DROPPING,PLEASE HIT IT!$"
MES2		DB	"PRESS SPACE KEY TO PAUSE!$"
MES3		DB	"PRESS ESC KEY TO RETURN MAIN INTERFACE!$"
MES4		DB	"PRESS LETTER 'e' TO EXIT!$"
MES5		DB	"INPUT PASSWORD:$"
MES7		DB	"PRESS c KEY TO CHOOSE DEGREE OF DIFFICULT!$"
MES8		DB	"NUMBER:$"
MESS0		DB	"SCORE:$"
MESS1		DB	"RIGHT:$"
MESS2		DB	"WRONG:$"
MESS3		DB	"TIME:$"
MESS4		DB	"CLICK NUM:$"
MESE		DB	"NOW IT'S EASY!$"			;备用显示难度字符串
MESN		DB	"NOW IT'S NORMAL!!$"
MESD		DB	"NOW IT'S DIFFICULT!!!$"
PAUSMES		DB	"PRESS c KEY CHANGE DIFFICULT WHEN PAUSE$"
LEN		DW	6					;密码长度
BUF		DW	6 DUP(?)				;用于保存输入的密码
TIME		DW	400					;标准限定时间
SCO		DW	20D					;正确最大得分
NUM		DW	0
SCORE		DW	0
RIGHT		DW	0
WRONG		DW	0
DEGREE		DW	?
MES6		DB	"/$"
YEAR		DW	?
MONTH		DB	?
DAY		DB	?
Z		DW	0
SMILES		DB	23 DUP(1)				;记录笑脸状态
SMNUM		DB	23					;记录笑脸存在个数
PASSWORD	DB	"123456"				;密码
SPEED		DW	2000H					;速度等级
LETTERS		DB	"jwmilzoeucgpravskntxhdyqfb"		;一号LETTER
		DB	"iytpkwnxlsvxrmofzhgaebudjq"
		DB	"nwimzoexrphysfqtvdcgljukda"
LETTERS2	DB	"jwmIlzoEucgPraVsknTxHDYqfb"		;备用二号LETTER
		DB	"iyTpKwnXlsVxrmOfzhGaeBudjq"
		DB	"nWimZOexrphysFqTvdcGljukda"
PRESENT_POSITION	DB	1
			DB	0				;保存当前位置
DATA		ENDS
; =========================================================
CODE	SEGMENT							;代码段
MAIN	PROC	FAR
ASSUME	CS: CODE, DS: DATA
START:	MOV		AX, DATA
	MOV		DS, AX
	MOV		ES, AX
	MOV		SCORE,0					;重置分数
	MOV		RIGHT,0					;重置正确数
	MOV		WRONG,0					;重置错误数
	MOV		NUM,0					;重置总数
	MOV		CX, 1000H
	MOV		AH, 01H
	INT		10H					;隐藏光标
PSWD:	CLEAR_SCREEN	00D, 00D, 24D, 79D			;清屏
	INIT_BOARDER	00D, 00D, 0AH, DL, 80D
	INIT_BOARDER	24D, 00D, 0AH, DL, 80D
	INIT_BOARDER	00D, 00D, 0AH, DH, 25D
	INIT_BOARDER	00D, 79D, 0AH, DH, 25D			;画边框
	SETCUSOR	00H,11D,18D				; 设置光标位置
	LEA 		DX,MES5					;提示输入密码
	MOV		AH,09H
	INT		21H
	CALL		INPUTPS					;调用输入密码子程序
	CALL		INTOM					;调用判断密码子程序
	CMP 		LEN,0			
	JE 		M					;正确下一步
	JMP 		PSWD					;错误重来
M:	CLEAR_SCREEN	00D, 00D, 24D, 79D			;屏幕全清	
	INIT_BOARDER	00D, 00D, 0AH, DL, 80D
	INIT_BOARDER	24D, 00D, 0AH, DL, 80D
	INIT_BOARDER	00D, 00D, 0AH, DH, 25D
	INIT_BOARDER	00D, 79D, 0AH, DH, 25D			;画边框
	MENU		05D, 15D, ZK				;显示菜单
	SETCUSOR	00H,07D,15D				;设置光标位置
	LEA		DX,DATE
	MOV		AH,09H
	INT		21H
	CALL		NOWD					;取系统日期
	MOV		DX,0FFFFH
	MOV		AX,YEAR					;这几行用来显示当前日期	
	CALL		WRITEINT
	MOV		AH,0
	LEA		DX,MES6
	MOV		AL,MONTH
	CALL		WRITEINT
	MOV		AL,DAY
	CALL		WRITEINT
	MENU		09D, 15D, MES0				;这几行显示菜单
	MENU		11D, 18D, MES1
	MENU		13D, 18D, MES2
	MENU		15D, 18D, MES3
	MENU		17D, 15D, MES4
	MENU		19D, 15D, MES7
	MENU		21D, 15D, PAUSMES
	SETCUSOR	00H,22D,33D				;设置光标位置
KEYIN:	MOV		AH, 07H					;从键盘输入命令字符
	INT		21H
	CMP		AL, 0DH					;enter转普通难度
	JE		L1	
	CMP		AL,'c'
	JE 		DIF					;相等跳DIF 
	CMP		AL, 'e'					;不等就和e做比较
	JE		EXIT					;如果相等则转exit
	JMP		KEYIN					;不等跳转到keyin
EXIT:	MOV		AX, 4C00H				;退出程序
	INT		21H
L1:	JMP		NORMAL
DIF:	CLEAR_SCREEN	01D, 01D, 23D, 78D  ;清屏
	MENU		09D, 18D, DIF0
	MENU		11D, 18D, DIF1
	MENU		13D, 18D, DIF2
	MENU		15D, 18D, MES4
	MOV		AH, 07H					;从键盘输入命令字符
	INT		21H
TWL:	CMP		AL,"c"
	JE		DIF
	CMP		AL, '1'	
	JE		EASY	
	CMP		AL, '2'	
	JE		NORMAL	
	CMP		AL, '3'	
	JE		DIFFICULT	
	CMP		AL, 'E'	
	JE		EXIT
	JMP		M
EASY: 	MOV 		DEGREE,10000				;简单难度
	MOV		TIME,400				
ELE:	CMP		AL,"c"
	JE		TWL
	SCROLL		01D,01D,23D,78D,10110000B		;变色
	LEA		SI, LETTERS
	JMP		BEGIN
NORMAL: MOV 		DEGREE,5000				;普通难度
	MOV		TIME,300
	SCROLL		01D,01D,23D,78D,11110000B
	LEA		SI, LETTERS
	JMP		BEGIN
DIFFICULT:
TEN:	CMP		AL,"c"
	JE		ELE
	MOV 		DEGREE,2000
	MOV		TIME,200
	LEA		SI, LETTERS
	SCROLL		01D,01D,23D,78D,11000000B
BEGIN:	INIT_BOARDER	23D, 01D, 01H, DL, 78D			;画边框
	CLEAR_SCREEN	00D, 00D, 02D, 79D			;清中间内容
NINE:	CMP		AL,"c"
	JE		TEN
	CALL		DISPLAYS
	CALL		DISPLAYR
	CALL		DISPLAYW
	CALL		DISPLAYT
	CALL		DISPLAYN
	CALL		DISPLAYZ
	SETCUSOR	00H,03H,01H
	MOV		CX, 78 	
EIGHT:	CMP		AL,"c"					;PAUSE跳跃用
	JE		NINE
NEXTLETTER:MOV		AH, 02H					;显示字母
	MOV		DL, [SI]
	INT		21H
	INC		SI
	LOOP		NEXTLETTER				;显示一开始23个字母的算法
START_GAME:
	MOV		AH, 2CH
	INT		21H					;调取系统时间chcldh分别存放时分秒
	INC		DL					;自增
	CMP		DL, 78
	JNA		SG1
	SUB		DL, 78
SG1:	MOV		PRESENT_POSITION, DL
	LEA		DI, LETTERS
	ADD		DI, WORD PTR PRESENT_POSITION		;将当前列数赋给di
	DEC		DI							
	MOV		DL, PRESENT_POSITION			;将当前列数赋给dl
	SETCUSOR	00H,03H,PRESENT_POSITION				
	MOV		CX, 19D					;19行循环19次
NEXTROW:PUSH		CX
	MOV		CX, SPEED				;设置速度	
WAIT_FOR_KEY:PUSH	CX
	MOV		CX,DEGREE
DELAY:	LOOP		DELAY
	PUSH		DX
	MOV		AH, 06H					;从键盘输入字符,放入AL
	MOV		DL, 0FFH
	INT		21H
	POP		DX
	JZ		PASS
	CMP		AL, 1BH					; 如果键入ESC,则返回主菜单
	JE		TO_START
	CMP		AL, " "					; 如果键入SPACE,则游戏暂停
	JNE		PASS0
PAUSE:
	PUSH		DX					; 暂停处理
	MOV		AH, 06H
	MOV		DL, 0FFH
	INT		21H
	POP		DX
	CMP		AL,"c"
	JE		EIGHT
	CMP		AL, " "					;将字符和空格作比较
	JNE		PAUSE					;不等则往返
	JMP		PASS
TO_START:MOV		LEN,6
	JMP		START
SEVEN:	JMP		DIFFICULT
PASS0:	CMP		AL,[DI]					;输入字母正确！则字母消失
	JE		SIX
	INC		NUM				
PASS:	POP		CX					;CX出栈
	LOOP		WAIT_FOR_KEY				;继续等待键入
DOWN:	MOV		AH, 0AH					;在当前光标位置写空格
	MOV		AL, " "
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H					;光标位置显示字符
	DEC		SCO
	DEC		TIME
	CMP		TIME,0
	JE		SEVEN
	INC		DH					;行数加一
	MOV		AH, 02H					;改变光标位置
	MOV		BH, 00H
	INT		10H
	MOV		AH, 0AH					;在当前光标位置写字母
	MOV		AL, [DI]
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H					;当前位置显示字母
	POP		CX
	LOOP		NEXTROW					;下一行
	JMP		LETTER_OVER
SIX:	JMP		DISAPPEAR
FIVE:	JMP		DIFFICULT
LETTER_OVER:							;字母自动消失
	MOV		AH, 0AH
	MOV		AL, " "
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H					;空格显示一次
	INC		DH					;行号加一
	MOV		AH, 02H
	MOV		BH, 00H
	INT		10H					;置光标位置
	MOV		AH, 0AH
	MOV		AL, " "					;空格给AL
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H
	INC		WRONG
	DEC		TIME
	DEC		SCORE
	CALL		SMILE
	CMP		SMNUM,'0'				;笑脸全部消失退出
	JE		EXIT1
	PUSH		AX
	MOV		AX,WRONG
	ADD		AX,RIGHT
	MOV		Z,AX
	POP		AX
	CALL		DISPLAYW				;这几行显示正确正确，错误，总数等
	CALL		DISPLAYS
	CALL		DISPLAYT
	CALL		DISPLAYN
	CALL		DISPLAYZ
FOUR:	CMP		RIGHT,10				;输对10个换难度
	JE		FIVE
	CMP		TIME,0					;时间到零换难度
	JE		FIVE
	JMP		NEXT_LETTER
	JMP		DISAPPEAR
EXIT1:	MOV		AX,4C00H
	INT		21H
DISAPPEAR:
	INC		NUM					;击中字母后输出空格
	POP		CX
	MOV		AH, 0AH					;在光标位置显示空格
	MOV		AL, " "					;把空格ASCII码给AL	
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H	
	INC		RIGHT
	INC		TIME
	MOV		AX,0
	ADD		AX,SCO
	ADD		SCORE,AX
	CMP		RIGHT,10
	JE		FOUR
	PUSH		AX
	MOV		AX,WRONG
	ADD		AX,RIGHT
	MOV		Z,AX
	POP		AX
	CALL		DISPLAYZ
	CALL		DISPLAYS
	CALL		DISPLAYR				;这几行显示正确正确，错误，总数等
	CALL		DISPLAYT
	CALL		DISPLAYN
	POP		CX	
	CMP		TIME,0	
	JE		FOUR	
	MOV		SCO,20D
NEXT_LETTER:
	SETCUSOR	00H,03H,PRESENT_POSITION		
	MOV		AL, [DI]  				;出现下一个新字母的算法
	ADD		AL, 7					;列数加7
	CMP		AL, 7AH
	JNA		NEXT_LETTER1
	SUB		AL, 26
NEXT_LETTER1:
	MOV		AH, 0AH
	MOV		BH, 00H
	MOV		CX, 01H
	INT		10H					;在光标位置显示字符
	MOV		[DI], AL
	JMP		START_GAME				;重新开始游戏
	MAIN		ENDP					;主程序到此结束
NOWD	PROC		NEAR    				;返回当前时间信息
	MOV		AH,2AH
	INT		21H
	MOV		YEAR,CX
	MOV		MONTH,DH
	MOV		DAY,DL
	RET	
NOWD	ENDP
INPUTPS	PROC	NEAR   						;保存输入的密码
	PUSH	AX
	PUSH	DI
	PUSH	CX
	LEA	DI,BUF
	MOV	CX,6
ONE:	MOV	AH,07H
	INT	21H
	MOV	BYTE PTR [DI],AL
	MOV	DL,'*'
	MOV	AH,02H
	INT	21H
	INC	DI
	LOOP	ONE
	POP	CX
	POP	AX
	POP	DI
	RET
INPUTPS	ENDP
INTOM	PROC	NEAR						;判断输入的密码是否正确
	PUSH	DI
	PUSH	SI
	PUSH	CX
	PUSH	AX
	LEA	DI,BUF
	LEA	SI,PASSWORD
	MOV	CX,6
TWO:	MOV 	AL,BYTE PTR [DI]
	CMP 	BYTE PTR [SI],AL
	JE 	M1
	JMP 	M2 
M1:	DEC	LEN
M2:	INC 	DI
	INC 	SI
	LOOP 	TWO
	POP	DI
	POP	SI
	POP	CX
	POP	AX
	RET
INTOM 	ENDP
DISPLAYS	PROC	NEAR					;显示分数
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	00D, 00D, 00D, 79D
	SETCUSOR	00H,00H,42H
	LEA	DX,MESS0
	MOV	AX,SCORE
	CALL	WRITEINT
	POP	AX
	POP	DX
	RET
DISPLAYS	ENDP
DISPLAYR	PROC	NEAR					;显示正确数 
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	01D, 00D, 01D, 79D
	SETCUSOR	00H,01H,42H
	LEA	DX,MESS1
	MOV	AX,RIGHT
	CALL	WRITEINT
	POP	AX
	POP	DX
	RET
DISPLAYR	ENDP
DISPLAYW	PROC	NEAR					;显示错误数 
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	02D, 40D, 02D, 79D
	SETCUSOR	00H,02H,42H
	LEA	DX,MESS2
	MOV	AX,WRONG
	CALL	WRITEDEC
	POP	AX
	POP	DX
	RET
DISPLAYW	ENDP
DISPLAYT	PROC	NEAR					;显示时间 
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	00D, 00D, 00D, 40H
	SETCUSOR	00H,00H,00H
	LEA	DX,MESS3
	MOV	AX,TIME
	CALL	WRITEDEC
	POP	AX
	POP	DX
	RET
DISPLAYT	ENDP
DISPLAYZ	PROC	NEAR					;显示总字母
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	02D, 00D, 02D, 40H
	SETCUSOR	00H,02H,00H
	LEA	DX,MES8
	MOV	AX,Z
	CALL	WRITEDEC
	POP	AX
	POP	DX
	RET
DISPLAYZ	ENDP
DISPLAYN	PROC	NEAR					;显示输入数
	PUSH	AX
	PUSH	DX
	CLEAR_SCREEN	01D, 00D, 01D, 40H
	SETCUSOR	00H,01H,00H
	LEA	DX,MESS4
	MOV	AX,NUM
	CALL	WRITEDEC
	POP	AX
	POP	DX
	RET
DISPLAYN	ENDP
SMILE		PROC	NEAR					;记录笑脸数量的子程序
	DEC	SMNUM
RET
SMILESS		PROC	NEAR					;记录笑脸状态的子程序
	PUSH	BX
	PUSH	DX
	LEA	BX,SMILES
	ADD	BX,WORD PTR PRESENT_POSITION
	MOV	BX,0
	POP	BX
	POP	DX
RET
SMILESS		ENDP
SMILE		ENDP
CODE		ENDS
END		START

